You will mostly come across asynchronous in js and node. especially when we use event listeners with callback functions.
From ES2015, js and node's APIs has been reformed using Promises instead of callback functions.
Promise is an object that we must know.

Promise has the following rule.
First, create a Promise object by using new Promise. and add callback functions with resolve and reject as its parameter.
Now we can attach 'then' and 'catch' to our promise constant.
When resolve is called within the promise, 'then' is executed. On the other hand, when reject is called, 'catch' is executed.

const condition = true;
const promise = new Promise((resolve, reject) => {
    if(condition) {
        resolve('success');
    } else {
        reject('failed');
    }
});
  
promise
    .then((message) => {
        console.log(message);
    })
    .catch((error) => {
        console.error(error);
    })
    .finally(() => {
        console.log('must');
    });

To put it simple, promise is an obj that executes immediately, but returns the result later.
You can get the result by 'then' or 'catch' method after our promise obj is executed.
In the example code above, new Promise is immediately executed, but you get the result later only when we attach 'then.'

You can also attach 'then' or 'catch' to another 'then' or 'catch
by passing the previous 'then's value to the next 'then'

promise
    .then((message) => {
        return new Promise((resolve, reject) => {
            resolve(message);
        });
    })
    .then((message2) => {
        console.log(message2);
        return new Promise((resolve, reject) => {
            resolve(message2);
        });
    })
    .then((message3) => {
        console.log(message3);
    })
    .catch((error) => {
        console.log(error);
    });

Remember, you must always return "new Promise" from the previous 'then' in order to pass it to the next 'then'.
By using this technique, we can change callback into promises.
Let's take a look at a example.

